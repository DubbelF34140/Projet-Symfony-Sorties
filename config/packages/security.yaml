security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
            participant_provider:
                id: App\Security\ParticipantUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: false
            json_login:
                check_path: /api/login
                username_path: login
                password_path: password
            provider: participant_provider
            custom_authenticators:
                - App\Security\SessionTokenAuthenticator
            lazy: true
            logout:
                path: /api/logout
        main:
            lazy: true
            provider: participant_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                success_handler: App\Security\LoginSuccessHandler
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
                always_remember_me: true
            # ... (rest of the configuration remains the same)

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/logout, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/.*, roles: ROLE_USER }
        - { path: ^/api/.*, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/login, roles: PUBLIC_ACCESS}
        - { path: ^/reset_password, roles: PUBLIC_ACCESS }
        - { path: ^/reset_password/.*, roles: PUBLIC_ACCESS}
        - { path: ^/logout, roles: PUBLIC_ACCESS}
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/admin/.*, roles: ROLE_ADMIN }
        - { path: ^/.*, allow_if: "is_granted('IS_AUTHENTICATED_FULLY') and user.isActif()" }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
