{% extends 'base.html.twig' %}

{% block title %}Créer un nouveau Groupe{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1>Créer un nouveau Groupe</h1>

        <!-- Champ pour le nom du groupe -->
        <div class="form-group">
            <label for="group-name">Nom du groupe</label>
            <input type="text" id="group-name" class="form-control" placeholder="Nom du groupe">
        </div>

        <!-- Autocomplétion pour ajouter des participants -->
        <h2 class="mt-4">Ajouter un participant</h2>
        <input type="text" id="participant-autocomplete" class="form-control" placeholder="Rechercher un participant...">
        <div id="autocomplete-results" class="list-group mt-2"></div>

        <h2 class="mt-4">Participants ajoutés</h2>
        <ul id="participants-list" class="list-group">
            <!-- Les participants ajoutés apparaîtront ici -->
        </ul>

        <button type="submit" class="btn btn-success mt-4" id="submit-group">Créer le Groupe</button>

        <a href="{{ path('group_list') }}" class="btn btn-secondary mt-3">Retour à la liste des groupes</a>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const autocompleteInput = document.getElementById('participant-autocomplete');
            const autocompleteResults = document.getElementById('autocomplete-results');
            const participantsList = document.getElementById('participants-list');
            const submitButton = document.getElementById('submit-group');
            const groupNameInput = document.getElementById('group-name');

            let participants = []; // Stockage des participants ajoutés

            // Fonction pour effectuer la requête d'autocomplétion
            autocompleteInput.addEventListener('input', function () {
                const query = this.value;

                if (query.length >= 2) {
                    fetch(`/api/participants/search?q=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            autocompleteResults.innerHTML = '';
                            data.forEach(participant => {
                                const resultItem = document.createElement('a');
                                resultItem.href = '#';
                                resultItem.classList.add('list-group-item', 'list-group-item-action');
                                resultItem.textContent = participant.pseudo;
                                resultItem.dataset.id = participant.id;
                                resultItem.addEventListener('click', function (e) {
                                    e.preventDefault();
                                    addParticipantToGroup(participant);
                                });
                                autocompleteResults.appendChild(resultItem);
                            });
                        });
                }
            });

            // Fonction pour ajouter un participant à la liste
            function addParticipantToGroup(participant) {
                // Vérifier si le participant est déjà dans la liste
                if (participants.find(p => p.id === participant.id)) {
                    return;  // Le participant est déjà dans la liste
                }

                // Ajouter le participant à la liste des participants
                participants.push(participant);

                // Mettre à jour l'affichage de la liste
                const listItem = document.createElement('li');
                listItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                listItem.textContent = participant.pseudo;
                listItem.dataset.id = participant.id;

                // Créer le bouton de suppression
                const removeButton = document.createElement('button');
                removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'remove-participant-btn');
                removeButton.textContent = 'Retirer';
                removeButton.dataset.id = participant.id;
                removeButton.addEventListener('click', function () {
                    removeParticipantFromGroup(participant.id, listItem);
                });

                // Ajouter le bouton de suppression à l'élément de la liste
                listItem.appendChild(removeButton);

                // Ajouter l'élément à la liste des participants
                participantsList.appendChild(listItem);
            }

            // Fonction pour retirer un participant de la liste
            function removeParticipantFromGroup(participantId, listItem) {
                // Retirer le participant du tableau local
                participants = participants.filter(p => p.id !== participantId);

                // Supprimer l'élément visuel de la liste
                listItem.remove();
            }

            // Gestion de la soumission du groupe avec les participants
            submitButton.addEventListener('click', function (e) {
                e.preventDefault();

                const groupName = groupNameInput.value.trim();
                if (!groupName) {
                    alert('Veuillez entrer un nom pour le groupe.');
                    return;
                }

                // Créer l'objet des données à envoyer
                const groupData = {
                    nom: groupName,
                    participants: participants.map(p => p.id) // Extraire les ID des participants ajoutés
                };

                // Envoyer la requête pour créer le groupe avec les participants
                fetch(`/groups/create_submit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(groupData)
                }).then(response => response.json())
                    .then(data => {
                        if (data.message) {
                            window.location.href = "{{ path('group_list') }}"; // Rediriger après création
                        } else {
                            console.log('Erreur lors de la création du groupe.');
                        }
                    });
            });
        });
    </script>
{% endblock %}
