{% extends 'base.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block body %}
    <button onclick="history.back()" class="btn btn-secondary back-to-list-btn">
        <i class="fas fa-arrow-left"></i>
    </button>
    <div class="container mt-5" style="margin-bottom: 100px">
        <!-- Titre et badge d'état de la sortie -->
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="display-4">{{ sortie.nom|capitalize }}</h1>
            <h1>
                <span class="badge
                    {% if sortie.etat.libelle == 'Ouverte' %}
                        bg-success
                    {% elseif sortie.etat.libelle == 'Clôturée' %}
                        bg-warning
                    {% elseif sortie.etat.libelle == 'Annulée' %}
                        bg-danger
                    {% elseif sortie.etat.libelle == 'En cours' %}
                        bg-info
                    {% else %}
                        bg-secondary
                    {% endif %}
                ">
                    {{ sortie.etat.libelle }}
                </span>
            </h1>
        </div>

        <!-- Section des détails de la sortie et la carte -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card mb-3 shadow-sm border-0">
                    <div class="card-body" style="background-color: rgba(202,198,198,0.2); border-radius: 5px">
                        <h2 class="text-primary">Détails de la sortie</h2>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Campus :</strong> {{ sortie.campus.nom }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Date et heure :</strong> {{ sortie.dateHeureDebut | date("d/m/Y H:i") }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Date limite d'inscription :</strong> {{ sortie.dateLimiteInscription | date("d/m/Y") }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Lieu :</strong> {{ sortie.lieu.nom }}, {{ sortie.lieu.rue }}, {{ sortie.lieu.ville.nom }}, {{ sortie.lieu.ville.codePostal }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Nombre de places :</strong> {{ sortie.nbInscriptionMax }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Durée :</strong> {{ sortie.duree }} minutes</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Latitude/Longitude :</strong> {{ sortie.lieu.latitude }}/{{ sortie.lieu.longitude }}</li>
                            <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Description :</strong> {{ sortie.infosSortie }}</li>
                            {% if sortie.organisateur %}
                                <li class="list-group-item" style="background-color: rgb(202,198,198,0.2);"><strong>Organisateur :</strong> {{ sortie.organisateur.pseudo }}</li>
                            {% endif %}
                        </ul>
                    </div>
                </div>

                <!-- Section des détails d'annulation si la sortie est annulée -->
                {% if sortie.etat.libelle == 'Annulée' %}
                    <div class="card mb-2 shadow-sm border-0">
                        <div class="card-body" style="background-color: rgb(202,198,198,0.2);border-radius: 5px">
                            <h5 class="card-title text-danger">Détails de l'annulation</h5>
                            <p class="card-text">{{ sortie.infosuppr }}</p>
                        </div>
                    </div>
                {% endif %}
            </div>

            <!-- Carte de localisation (col-md-6 pour 50% de l'écran) -->
                <div class="col-md-6" style="background-color: rgb(202,198,198,0.2);border-radius: 5px; height: 551px; width: 100%;">
                    <div class="card-body">
                        <h2 class="text-primary">Localisation</h2>
                        <div id="map" style="height: 430px; width: 100%;" class="border rounded shadow-sm"></div>
                    </div>
                </div>
        </div>

        <!-- Bouton pour gérer les participants du groupe privé -->
        {% if (sortie.organisateur.pseudo == app.user.pseudo)%}
            <button type="button" class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#managePrivateGroupModal">
                Groupe Privé
            </button>
        {%endif%}


        <!-- Section de la liste des participants -->
        <h2 class="mt-5 mb-3">Liste des Participants</h2>
        {% if(sortie.organisateur.pseudo == app.user.pseudo) %}
        <button type="button" id="contactSelected" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#contactParticipantsModal" disabled=true>
            Contacter les participants
        </button>
        {% endif %}

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                <tr>
                    {% if(sortie.organisateur.pseudo == app.user.pseudo) %}
                    <th scope="col"><input type="checkbox" id="selectAll"></th>
                    {% endif %}
                    <th scope="col">Pseudo</th>
                    <th scope="col">Action</th>
                </tr>
                </thead>
                <tbody>
                {% for p in participants %}
                    <tr>
                        {% if(sortie.organisateur.pseudo == app.user.pseudo) %}
                        <td><input type="checkbox" class="select-participant" value="{{ p.email }}"></td>
                        {% endif %}
                        <td>{{ p.pseudo }}</td>
                        <td>
                            <a href="{{ path('app_participant_view', {id: p.id}) }}" class="btn btn-primary btn-sm">
                                <i class="fas fa-user"></i> Voir Profil
                            </a>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="3" class="text-center text-muted">Aucun participant inscrit pour cette sortie.</td>
                    </tr>
                {% endfor %}
                {% if app.user in privateparticipants %}
                            {% for p in privateparticipants %}
                                <tr>
                                    {% if(sortie.organisateur.pseudo == app.user.pseudo) %}
                                        <td><input type="checkbox" class="select-participant" value="{{ p.email }}"></td>
                                    {% endif %}
                                    <td>{{ p.pseudo }}</td>
                                    <td>
                                        <a href="{{ path('app_participant_view', {id: p.id}) }}" class="btn btn-primary btn-sm">
                                            <i class="fas fa-user"></i> Voir Profil
                                        </a>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="2" class="text-center text-muted">Aucun participant privé pour cette sortie.</td>
                                </tr>
                            {% endfor %}
                {% endif %}
                </tbody>
            </table>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="contactParticipantsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Contacter les participants</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="contactParticipantsForm">
                            <input type="hidden" id="selectedParticipants" name="selectedParticipants">
                            <div class="mb-3">
                                <label for="subject" class="form-label">Sujet</label>
                                <input type="text" class="form-control" id="subject" name="subject" required>
                            </div>
                            <div class="mb-3">
                                <label for="message" class="form-label">Message</label>
                                <textarea class="form-control" id="message" name="message" rows="3" required></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                        <button type="button" class="btn btn-primary" id="sendMailButton">Envoyer</button>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Modal pour ajouter/retirer des participants au groupe privé -->
    <div class="modal fade" id="managePrivateGroupModal" tabindex="-1" aria-labelledby="managePrivateGroupModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="managePrivateGroupModalLabel">Gérer le groupe privé</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Champ d'autocomplétion pour ajouter des participants -->
                    <div class="mb-3">
                        <label for="participant-autocomplete" class="form-label">Ajouter un Groupe de participants</label>
                        <input type="text" id="participant-autocomplete" class="form-control shadow-sm" placeholder="Rechercher un groupe..." style="border-radius: 8px; background-color: rgba(255, 255, 255, 0.8);">
                        <div id="autocomplete-results" class="list-group mt-2 shadow-sm" style="border-radius: 8px; height: 100px; overflow-y: auto;"></div>
                    </div>
                    <h5 class="mt-4">Participants dans le groupe privé</h5>
                    <ul id="private-participants-list" class="list-group">
                        {% for participant in sortie.privateParticipants %}
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                {{ participant.pseudo }}
                                <button class="btn btn-danger btn-sm remove-participant-btn" data-id="{{ participant.id }}">Retirer</button>
                            </li>
                        {% else %}
                            <li class="list-group-item text-muted">Aucun participant dans le groupe privé.</li>
                        {% endfor %}
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>

{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectAllCheckbox = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.select-participant');
            const contactButton = document.getElementById('contactSelected');
            const sendMailButton = document.getElementById('sendMailButton');
            const form = document.getElementById('contactParticipantsForm');

            selectAllCheckbox.addEventListener('change', function () {
                checkboxes.forEach(function (checkbox) {
                    checkbox.checked = selectAllCheckbox.checked;
                });
                toggleContactButton();
            });

            checkboxes.forEach(function (checkbox) {
                checkbox.addEventListener('change', toggleContactButton);
            });

            function toggleContactButton() {
                const anyChecked = Array.from(checkboxes).some(function (checkbox) {
                    return checkbox.checked;
                });
                contactButton.disabled = !anyChecked;
            }

            // Remplir le champ caché avec les emails des participants sélectionnés lors de l'ouverture de la modal
            contactButton.addEventListener('click', function () {
                const selectedEmails = Array.from(checkboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);
                selectedParticipantsField.value = selectedEmails.join(',');
            });

            sendMailButton.addEventListener('click', function () {

                const subject = document.getElementById('subject').value.trim();
                const message = document.getElementById('message').value.trim();

                if (!subject || !message) {
                    alert('Veuillez remplir tous les champs.');
                    return;
                }

                const selectedParticipants = Array.from(checkboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);

                if (selectedParticipants.length === 0) {
                    alert('Veuillez sélectionner au moins un participant.');
                    return;
                }

                const formData = new FormData(form);
                formData.append('selectedParticipants', selectedParticipants.join(','));

                fetch('/api/mail', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.message) {
                            alert(data.message); // Affiche le message de succès
                            // Ferme la modal après succès
                            const modal = bootstrap.Modal.getInstance(document.getElementById('contactParticipantsModal'));
                            modal.hide();
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de l\'envoi des emails.');
                    });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Coordonnées latitude et longitude de la sortie
            const latitude = {{ sortie.lieu.latitude }};
            const longitude = {{ sortie.lieu.longitude }};

            // Initialisation de la carte
            const map = L.map('map').setView([latitude, longitude], 13);

            // Ajouter une couche de tuiles (carte de fond)
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap'
            }).addTo(map);

            // Ajouter un marqueur aux coordonnées de la sortie
            L.marker([latitude, longitude]).addTo(map)
                .bindPopup("{{ sortie.lieu.nom }}")
                .openPopup();
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const autocompleteInput = document.getElementById('participant-autocomplete');
            const autocompleteResults = document.getElementById('autocomplete-results');
            const privateParticipantsList = document.getElementById('private-participants-list');

            // Fonction pour effectuer la requête d'autocomplétion des groupes
            autocompleteInput.addEventListener('input', function () {
                const query = this.value;

                if (query.length >= 2) {
                    fetch(`/api/groups/search?q=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            autocompleteResults.innerHTML = '';
                            data.forEach(group => {
                                const resultItem = document.createElement('a');
                                resultItem.href = '#';
                                resultItem.classList.add('list-group-item', 'list-group-item-action');
                                resultItem.textContent = group.nom;
                                resultItem.dataset.id = group.id;
                                resultItem.addEventListener('click', function (e) {
                                    e.preventDefault();
                                    addGroupToPrivateParticipants(group);
                                });
                                autocompleteResults.appendChild(resultItem);
                            });
                        });
                }
            });

            // Fonction pour ajouter les participants du groupe sélectionné à la liste des participants privés
            function addGroupToPrivateParticipants(group) {
                // Envoyer une requête pour récupérer les participants du groupe
                fetch(`/api/groups/${group.id}/participants`)
                    .then(response => response.json())
                    .then(participants => {
                        participants.forEach(participant => {
                            // Vérifier si le participant est déjà dans la liste
                            const existingItem = privateParticipantsList.querySelector(`[data-id="${participant.id}"]`);
                            if (!existingItem) {
                                // Créer l'élément de la liste
                                const listItem = document.createElement('li');
                                listItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                                listItem.textContent = participant.pseudo;
                                listItem.dataset.id = participant.id;

                                // Créer le bouton de suppression
                                const removeButton = document.createElement('button');
                                removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'remove-participant-btn');
                                removeButton.textContent = 'Retirer';
                                removeButton.dataset.id = participant.id;
                                removeButton.addEventListener('click', function () {
                                    removeParticipantFromPrivateGroup(participant.id, listItem);
                                });

                                // Ajouter le bouton de suppression à l'élément de la liste
                                listItem.appendChild(removeButton);

                                // Ajouter l'élément à la liste des participants privés
                                privateParticipantsList.appendChild(listItem);

                                // Ajouter le participant à la sortie via AJAX
                                fetch(`/api/sorties/{{ sortie.id }}/add-private-participant`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ participantId: participant.id })
                                }).then(response => {
                                    if (response.ok) {
                                        console.log('Participant ajouté');
                                    } else {
                                        // Si la requête échoue, retirer l'élément ajouté
                                        listItem.remove();
                                    }
                                });
                            }
                        });
                    });
            }

            // Fonction pour retirer un participant du groupe privé
            function removeParticipantFromPrivateGroup(participantId, listItem) {
                // Envoyer une requête pour retirer le participant du groupe privé (AJAX)
                fetch(`/api/sorties/{{ sortie.id }}/remove-private-participant`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ participantId: participantId })
                }).then(response => {
                    if (response.ok) {
                        console.log('Participant retiré');
                        // Retirer l'élément de la liste
                        listItem.remove();
                    }
                });
            }

            // Initialisation pour supprimer des participants déjà dans la liste
            privateParticipantsList.querySelectorAll('.remove-participant-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const participantId = this.dataset.id;
                    const listItem = this.closest('li');
                    removeParticipantFromPrivateGroup(participantId, listItem);
                });
            });
        });
    </script>

{% endblock %}
